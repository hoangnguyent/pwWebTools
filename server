#!/bin/bash

# Last Updated: 2024/10/14
# Version: 3.0
# Name: Perfect World Server Control
# Description: A script to start and stop the many different domains for a PW server
# Require: Perfect World server v1.7.3

# create a link to sbin for access from anywhere
#ln -s /pwserver/server /sbin/server

DATE=`date +%Y-%m-%d-%H-%M-%S`

##### LOCAL VARIABLES #####
# Server
ServerDir=/root/home
MAPS=$ServerDir/maps
LogsDir=$ServerDir/logservice/logs
cpwDir=/var/www/html/CPW
url=http://127.0.0.1:8080/pwadmin/AA
fil=cmd.jsp
gl=1 # (max 7) number of glinkd instances to start

# Admin Control Panel root directories (blank "" will not try to load during server start/stop)
DIR_TOMCAT_BIN=/root/home/pwadmin/bin

# STORAGE directory must exist to use backup
STORAGE=/media/storage
BKUPDIR=${STORAGE}/backup

##### MySQL CONFIG USED FOR BACKUP ONLY #####
USR=admin
PASSWD=admin
DB=pw

# COLOUR SETTINGS #
B="[40;36m"
W="[40;37m"
G="[40;32m"
R="[40;31m"
Y="[40;33m"
P="[40;35m"

function bMaps {
	echo eWVzLGdzMDEsV29ybGQKeWVzLGlzNjEsQmVnaW5uZXIgV29ybGQgKDEuNS4zKQpubyxpczYyLE9yaWdpbmF0aW9uICgxLjUuMSkKbm8saXMwMSxDaXR5IG9mIEFib21pbmF0aW9ucwpubyxpczAyLFNlY3JldCBQYXNzYWdlCm5vLGlzMDMsbmEKbm8saXMwNCxuYQpubyxpczA1LEZpcmVjcmFnIEdyb3R0bwpubyxpczA2LERlbiBvZiBSYWJpZCBXb2x2ZXMKbm8saXMwNyxDYXZlIG9mIHRoZSBWaWNpb3VzCm5vLGlzMDgsSGFsbCBvZiBEZWNlcHRpb24Kbm8saXMwOSxHYXRlIG9mIERlbGlyaXVtCm5vLGlzMTAsU2VjcmV0IEZyb3N0Y292ZXIKbm8saXMxMSxWYWxsZXkgb2YgRGlzYXN0ZXIKbm8saXMxMixGb3Jlc3QgUnVpbnMKbm8saXMxMyxDYXZlIG9mIFNhZGlzdGljIEdsZWUKbm8saXMxNCxXcmFpdGhnYXRlCm5vLGlzMTUsSGFsbHVjaW5hdG9yeSBUcmVuY2gKbm8saXMxNixFZGVuCm5vLGlzMTcsQnJpbXN0b25lIFBpdApubyxpczE4LFRlbXBsZSBvZiB0aGUgRHJhZ29uCm5vLGlzMTksTmlnaHRzY3JlYW0gSXNsYW5kCm5vLGlzMjAsU25ha2UgSXNsZQpubyxpczIxLExvdGhyYW5pcwpubyxpczIyLE1vbWFnYW5vbgpubyxpczIzLFNlYXQgb2YgVG9ybWVudApubyxpczI0LEFiYWRkb24Kbm8saXMyNSxXYXJzb25nIENpdHkKbm8saXMyNixQYWxhY2Ugb2YgTmlydmFuYQpubyxpczI3LEx1bmFyIEdsYWRlCm5vLGlzMjgsVmFsbGV5IG9mIFJlY2lwcm9jaXR5Cm5vLGlzMjksRnJvc3Rjb3ZlciBDaXR5Cm5vLGlzMzEsVHdpbGlnaHQgVGVtcGxlCm5vLGlzMzIsQ3ViZSBvZiBGYXRlCm5vLGlzMzMsQ2hyb25vIENpdHkKbm8saXMzNCxQZXJmZWN0IENoYXBlbApubyxpczM1LEd1aWxkIEJhc2UKbm8saXMzNyxNb3JhaQpubyxpczM4LFBob2VuaXggVmFsbGV5Cm5vLGlzMzksRW5kbGVzcyBVbml2ZXJzZQpubyxpczQwLEJsaWdodGVkIENoYW1lcgpubyxpczQxLEVuZGxlc3MgVW5pdmVyc2UKbm8saXM0MixOYXRpb24gV2FyIFdhcmdvZCBHdWxjaApubyxpczQzLEZpdmUgRW1wZXJvcnMKbm8saXM0NCxOYXRpb24gV2FyIChGbGFnKQpubyxpczQ1LE5hdGlvbiBXYXIgKENyeXN0YWwpCm5vLGlzNDYsTmF0aW9uIFdhciAoQnJpZGdlKQpubyxpczQ3LFN1bnNldCBWYWxsZXkKbm8saXM0OCxTaHV0dGVyIFBhbGFjZQpubyxpczQ5LERyYWdvbiBIaWRkZW4gRGVuCm5vLGlzNTAsUmVhbG0gb2YgUmVmbGVjdGlvbgpubyxpczYzLFByaW1hbCBXb3JsZApubyxpczY2LEZsb3dzaWx2ZXIgUGFsYWNlCm5vLGlzNjcsVW5kZXJjdXJyZW50IEhhbGwKbm8saXM2OCxQcmltYWwgV29ybGQgKFN0b3J5IE1vZGUpCm5vLGlzNjksTGlnaHRTYWlsIENhdmUKbm8saXM3MCxDdWJlIG9mIEZhdGUgKDIpCm5vLGlzNzEsRHJhZ29uIENvdW5xZXN0IEJhdHRsZWZpZWxkCm5vLGlzNzIsSGVhdmVuZmFsbCBUZW1wbGUgKGJhc2UpCm5vLGlzNzMsSGVhdmVuZmFsbCBUZW1wbGUgKGlzNzMpCm5vLGlzNzQsSGVhdmVuZmFsbCBUZW1wbGUgKGlzNzQpCm5vLGlzNzUsSGVhdmVuZmFsbCBUZW1wbGUgKGlzNzUpCm5vLGlzNzYsVW5jaGFydGVkIFBhcmFkaXNlCm5vLGlzNzcsVGh1cnNkYXkgVG91cm5hbWVudApubyxpczgwLEhvbWVzdGVhZApubyxpczgxLEhvbWVzdGVhZApubyxpczgyLEhvbWVzdGVhZApubyxpczgzLEhvbWVzdGVhZApubyxiZzAxLFRlcnJpdG9yeSBXYXIgVC0zIFB2UApubyxiZzAyLFRlcnJpdG9yeSBXYXIgVC0zIFB2RQpubyxiZzAzLFRlcnJpdG9yeSBXYXIgVC0yIFB2UApubyxiZzA0LFRlcnJpdG9yeSBXYXIgVC0yIFB2RQpubyxiZzA1LFRlcnJpdG9yeSBXYXIgVC0xIFB2UApubyxiZzA2LFRlcnJpdG9yeSBXYXIgVC0xIFB2RQpubyxhcmVuYTAxLEV0aGVyYmxhZGUgQXJlbmEKbm8sYXJlbmEwMixMb3N0IEFyZW5hCm5vLGFyZW5hMDMsUGx1bWUgQXJlbmEKbm8sYXJlbmEwNCxBcmNob3NhdXIgQXJlbmEKbm8scmFuZDAzLFF1aWNrc2FuZCBNYXplIChyYW5kMDMpCm5vLHJhbmQwNCxRdWlja3NhbmQgTWF6ZSAocmFuZDA0KQo= | base64 --decode > $MAPS
}

function load_maps {
	if [ ! -f ${MAPS} ]; then
		bMaps ${MAPS}
		echo "Maps List Created at $MAPS"
	fi
	echo ""
	echo "Starting Selected Maps in List at $MAPS"
	readarray tb < ${MAPS}
	str_map_ids=""
	for str in "${tb[@]}"; do
		opt=`echo $str | awk -F',' '{print $1}'`
		if [[ "$opt" == "yes" ]]; then
			map_id=`echo $str | awk -F',' '{print $2}'`
			map_name=`echo $str | awk -F',' '{print $3}'`
			if [[ "$map_id" != "gs01" ]]; then
				str_map_ids=" $str_map_ids $map_id"
			fi
		fi
	done
			
	{ cd /$ServerDir/gamed; LD_PRELOAD=./libtask.so nohup ./gs gs01 gs.conf gmserver.conf gsalias.conf ${str_map_ids} & } &>/dev/null
	
	sleep 5

	echo ""
	freemem=`free -m | grep "Mem:" | awk '{print $4}'`
	echo $G"MAPS LOADED ${Y}(Memory Available: ${freemem} MB)${W}"
	echo ""
}

[[ ! -d $LogsDir ]] && mkdir -p $LogsDir

case ${1} in

"start" )
	clear
	arg2=${2}
	x="true"
	if [[ ${arg2} == "no-maps" ]]; then
		x="false"
		arg2=""
	fi
	/$ServerDir/chmod.sh
	echo ""
	echo $G"SERVER STARTING "$W"PLEASE WAIT...."
	echo -ne $B'>                    '$W'(0%)\r'	
	{ cd /$ServerDir/logservice; ./logservice logservice.conf & } &> /dev/null
	sleep 1
	
	echo -ne $B'-->                  '$W'(10%)\r'
	{ cd /$ServerDir/uniquenamed; ./uniquenamed gamesys.conf & } &> /dev/null
	sleep 2
	
	echo -ne $B'---->                '$W'(20%)\r'
	{	
		if [[ -d /$ServerDir/auth ]]; then
			cd /$ServerDir/auth/build/; ./authd.sh start > $LogsDir/authd.log &
		elif [[ -d /$ServerDir/authd ]]; then
			cd /$ServerDir/authd/; ./authd > $LogsDir/authd.log &
		fi
	}&> /dev/null
	sleep 3
	
	echo -ne $B'-------->            '$W'(40%)\r'	 
	{ cd /$ServerDir/gamedbd; ./gamedbd gamesys.conf & } &> /dev/null
	sleep 2
	
	echo -ne $B'---------->          '$W'(50%)\r'
	{ cd /$ServerDir/gacd; ./gacd gamesys.conf & } &> /dev/null
	sleep 2
	
	echo -ne $B'------------>        '$W'(60%)\r'
	{ cd /$ServerDir/gfactiond; ./gfactiond gamesys.conf & } &> /dev/null
	sleep 2
	
	echo -ne $B'-------------->      '$W'(70%)\r'
	{ cd /$ServerDir/gdeliveryd; ./gdeliveryd gamesys.conf & } &> /dev/null
	sleep 3
	
	echo -ne $B'---------------->    '$W'(80%)\r'
	{
		for (( v = 1; v <= $gl; v++ )); do
			cd /$ServerDir/glinkd; ./glinkd gamesys.conf $v &
			sleep 2
		done
	}&> /dev/null
	
	echo -ne $B'------------------>  '$W'(90%)\r'
	{
		if [[ -f /$ServerDir/anti_crash ]]; then
			cd /$ServerDir; ./anti_crash &
			sleep 1
		fi
	}&> /dev/null
	echo -ne $B'-------------------->'$W'(100%)\r'
	echo $G'SERVER STARTED              '$W
	echo ""
	
	strTime=`date +"%a %b %d %I:%M %p"`
	
	[[ ${x} != "true" ]] || load_maps
	
	exit 0
	;;

"stop" )
	echo ""
	echo $R"STOPPING "$W"PLEASE WAIT...."
	strTime=`date +"%a %b %d %I:%M %p"`
	echo -ne $B'>                    '$W'(1%)\r'
	{
		pkill -9 anti_crash
		pkill -9 logservice
	}&>/dev/null
	echo -ne $B'-->                  '$W'(10%)\r'
	{
		sleep 1
		pkill -9 glinkd
	}&>/dev/null
	echo -ne $B'------>              '$W'(20%)\r'
	{	
		sleep 1
		pkill -9 gacd
	}&>/dev/null
	echo -ne $B'-------->            '$W'(30%)\r'
	{
		sleep 1
		pkill -9 gs
	}&>/dev/null
	echo -ne $B'---------->          '$W'(40%)\r'
	{
		sleep 1
		pkill -9 gfactiond
	}&>/dev/null
	echo -ne $B'------------>        '$W'(50%)\r'
	{
		sleep 1
		pkill -9 gdeliveryd
	}&>/dev/null
	echo -ne $B'-------------->      '$W'(60%)\r'
	{
		sleep 1
		pkill -9 uniquenamed
	}&>/dev/null
	echo -ne $B'---------------->    '$W'(70%)\r'
	{
		sleep 1
		pkill -9 gamedbd
	}&>/dev/null
	echo -ne $B'------------------>  '$W'(80%)\r'
	{
		sleep 1
		ps ax | grep authd | grep -v grep | awk '{print $1}' | xargs kill
	}&>/dev/null
	echo -ne $B'-------------------> '$W'(90%)\r'
	{
		echo "Clearing Cache"
		sleep 2
		echo 3 > /proc/sys/vm/drop_caches
		sleep 1
	}&>/dev/null
	
	echo -ne $B'-------------------->'$W'(100%)\r'
	echo $R"SERVER STOPPED              "$W
	echo ""
	freemem=`free -m | grep "Mem:" | awk '{print $4}'`
	echo ${Y}"(Memory Available: ${freemem} MB)${W}"
	echo ""
	exit 0
	;;

"restart" )
	${0} stop
	sleep 2
	${0} start
	;;

"start-map" )
	if [[ ! -z ${2} ]]; then
		echo ""
		echo -ne $G'STARTING MAP '$W $2'\r'
		{ cd /$ServerDir/gamed; ./gs $2 > $LogsDir/$2.log & } &>/dev/null
		sleep 3
		freemem=`free -m | grep "Mem:" | awk '{print $4}'`
		echo "${G}MAP ${2} LOADED$ {Y}(Memory Available: ${freemem} MB)${W}"
		#echo $G'MAP LOADED                  '$W
		echo ""
	else
		echo "USAGE : server start-map is62"
		echo "USAGE : server start-map is62 log"
	fi
	exit 0
	;;

"stop-map" )
	if [[ ! -z ${2} ]]; then
		echo ""
		procID=`ps ax | grep "./gs ${2}" | grep -v 'grep' | awk '{print $1}'`
		if [[ $procID != "" ]]; then
			echo -ne "STOPPING MAP ${2}\r"
			kill -9 $procID
			sleep 2
			freemem=`free -m | grep "Mem:" | awk '{print $4}'`
			echo "MAP ${2} ${R}STOPPED ${Y}(Memory Available: ${freemem} MB)${W}"
			echo ""
		else
			echo "MAP ${2} not found to be running..."
			echo ""
		fi
	else
		echo "USAGE : server stop-map is62"
	fi
	exit 0
	;;

"status" )
	if [ ! -f ${MAPS} ]; then
		bMaps ${MAPS}
		echo "Maps List Created at $MAPS"
		echo ""
	fi
	
	echo $Y"Checking server status...."$W
	sleep 2
	if [ "$(pidof ./gs)" ]; then
		echo $G
		echo "./GS"
	else
		echo $R
		echo "./GS"
	fi
	
	if [ "$(pidof ./gamedbd)" ]; then
		echo $G
		echo "./GAMEDBD"
	else
		echo $R
		echo "./GAMEDBD"
	fi

	if [ "$(pidof ./gdeliveryd)" ]; then
		echo $G
		echo "./GDELIVERY"	
	else
		echo $R
		echo "./GDELIVERY"	
	fi

	if [ "$(pidof ./gfactiond)" ]; then
		echo $G
		echo "./GFACTIOND"
	else
		echo $R
		echo "./GFACTIOND"
	fi
	
	if [ "$(pidof ./java)" ]; then
		echo $G
		echo "./AUTHD"
	else
		echo $R
		echo "./AUTHD"
	fi
	
	if [ "$(pidof ./uniquenamed)" ]; then
		echo $G
		echo "./UNIQUENAMEDB"
	else
		echo $R
		echo "./UNIQUENAMEDB"
	fi

	if [ "$(pidof ./glinkd)" ]; then
		echo $G
		echo "./GLINKD"
	else
		echo $R
		echo "./GLINKED"
	fi

	if [ "$(pidof ./gacd)" ]; then
		echo $G
		echo "./GACD"
	else
		echo $R
		echo "./GACD"
	fi

	if [ "$(pidof ./logservice logservice.conf)" ]; then
		echo $G
		echo "./LOGSERVICE"
	else
		echo $R
		echo "./LOGSERVICE"
	fi
	freemem=`free -m | grep "Mem:" | awk '{print $4}'`
	msg="Memory Available: ${freemem} MB"
	echo $Y
	echo "${msg}"
	$s5
	echo $W
	
	exit 0
	;;

"pwAdmin")
	if [[ ! -z ${2} ]]; then
		cd ${DIR_TOMCAT_BIN}
		if [[ ${2} == "start" ]]; then
			{
				./startup.sh
			} &>/dev/null
			echo ""
			echo $G"pwAdmin/iWeb Started..."$W
			echo ""
		elif [[ ${2} == "stop" ]]; then
			{
				./shutdown.sh
			} &>/dev/null
			echo ""
			echo $R"pwAdmin/iWeb Stopped..."$W
			echo ""
		else
			${0}
		fi
	else
		${0}
	fi
	exit 0
	;;
	
"CPW")
	if [[ ! -z ${2} ]]; then
		cd ${cpwDir}
		./cpw ${2} ${3}
	else
		${0}
	fi
	exit 0
	;;

"clearlogs")
	if [[ -d ${LogsDir} ]]; then
		rm -rf ${LogsDir}/*
		echo ""
		echo "All logs in ${LogsDir} ${R}Deleted${W}...!"
		echo ""
		if [[ -d ${ServerDir}/admin_gui/logs ]]; then
			rm -rf ${ServerDir}/admin_gui/logs/*
			echo "All logs in ${ServerDir}/admin_gui/logs ${R}Deleted${W}...!"
			echo ""
		fi
		exit 0
	else
		echo ""
		echo "${LogsDir} directory not found..."
		echo ""
		exit 1
	fi
	;;
	
"trigger")
	if [[ ! -z ${pwAdmin_2} ]] && [[ -d ${pwAdmin_2} ]]; then
		if [[ ! -z ${2} && ! -z ${3} && ! -z ${4} ]]; then
			if ! ps ax | grep -v grep | grep catalina > /dev/null; then
				cd $pwAdmin_2/bin
				./shutdown.sh
				sleep 2
				./startup.sh
				sleep 10
			fi
			
			if ps ax | grep -v grep | grep catalina > /dev/null; then
				#[[ -f $pwAdmin_2/webapps/pwadmin/AA/trig.jsp ]] || bTrig
				sleep 1
				/usr/bin/wget $url/$fil?cmd_opt="${1}"\&val_1="${2}"\&val_2="${3}"\&val_3="${4}" > /dev/null 2>&1
				#/usr/bin/wget http://127.0.0.1:8080/pwadmin/AA/trig.jsp?trg_opt="${4}"\&trg_tag="${2}"\&trg_id="${3}"
				rm -f cmd.jsp?*
			fi
		else
			echo ""
			echo "USAGE : server trigger mapID TriggerGM_ID start|stop"
			echo ""
		fi
	fi
	
	exit 0
	;;
	
"msg")
	if ! ps ax | grep -v grep | grep catalina > /dev/null; then
		cd $pwAdmin_2/bin
		./shutdown.sh
		sleep 2
		./startup.sh
		sleep 10
	fi

	/usr/bin/wget $url/$fil?cmd_opt="broadcast"\&val_1="${2}" > /dev/null 2>&1
	#/usr/bin/wget http://127.0.0.1:8080/pwadmin/AA/sysmsg.jsp?say="${2}" > /dev/null 2>&1

	rm -f cmd.jsp?*
	
	exit 0
	;;

"dblDrops")
	if ! ps ax | grep -v grep | grep catalina > /dev/null; then
		cd $pwAdmin_2/bin
		./shutdown.sh
		sleep 2
		./startup.sh
		sleep 10
	fi
	
	if [ ! -z "${3}" ]; then
		/usr/bin/wget $url/$fil?cmd_opt="${1}"\&val_1="${2}"\&val_2="${3}" > /dev/null 2>&1
	elif [ ! -z "${2}" ]; then
		/usr/bin/wget $url/$fil?cmd_opt="${1}"\&val_1="${2}" > /dev/null 2>&1
	fi
	
	rm -f cmd.jsp?*
	
	exit 0
	;;

"exportrole")
	if [[ ! -z ${2} && ! -z ${3} ]]; then
		cd /$ServerDir/gamedbd; ./gamedbd gamesys.conf exportrole ${2} > ${3}
	fi
	
	exit 0
	;;

"importrole")
	if [[ ! -z ${2} ]]; then
		cd /$ServerDir/gamedbd; ./gamedbd gamesys.conf importrole ${2}
	fi
	
	exit 0
	;;
	
"cubi")
	if [[ ! -z ${2} && ! -z ${3} ]]; then
		mysql -u$USR -p$PASSWD --execute="call usecash(${2}, 1, 0, 1, 0, ${3}, 1, @ERROR)" $DB
	fi
	
	exit 0
	;;

* )
	# USER INPUT SETTINGS #
	echo ""
	echo "USAGE : server [OPTION] [ARG]"
	echo ""
	echo "OPTIONS :"
	echo "	start"
	echo "	stop"
	echo "	start-map"
	echo "	stop-map"
	echo "	status"
	echo "	pwAdmin [ARGs: start|stop]"
	echo "	CPW [ARGs: new | revision]"
	echo "	clearlogs"
	echo "	msg 'system message'"
	echo "	trigger [ARGs: mapID GMID start|stop]"
	echo "	dblDrops [ARGs: true|false]"
	echo "	exportrole id# file.xml"
	echo "	importrole file.xml"
	echo "	cubi [ARGs: accountID ###CUBI]"
	echo ""
	echo "EDIT \"maps\" file according to which maps to start automatically..."
	echo ""
	exit 0
	;;

esac
